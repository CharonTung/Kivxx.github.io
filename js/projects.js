/**
 * Â∞àÊ°àÂÖßÂÆπÁÆ°ÁêÜÁ≥ªÁµ± (GitHub Pages ÂÑ™ÂåñÁâà)
 * Ë≤†Ë≤¨ËºâÂÖ•„ÄÅÊ∏≤ÊüìÂíåÁÆ°ÁêÜ DIY ÂèäÂ∞àÊ°à‰ΩúÂìÅÂÖßÂÆπ
 */
class ProjectManager {
    constructor() {
        this.projects = [];
        this.categories = {};
        this.currentFilter = 'all';
        this.currentSort = 'date';
        this.isGitHubPages = true; // GitHub Pages Ê®ôË®ò
    }

    /**
     * ÂàùÂßãÂåñÂ∞àÊ°àÁÆ°ÁêÜÂô®
     */
    async init() {
        try {
            await this.loadProjects();
            this.setupEventListeners();
        } catch (error) {
            console.error('Â∞àÊ°àÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂ§±Êïó:', error);
            this.showError('ËºâÂÖ•Â∞àÊ°àË≥áÊñôÊôÇÁôºÁîüÈåØË™§ÔºåÊ≠£Âú®ÂòóË©¶ÂÇôÁî®ÊñπÊ°à...');
            // GitHub Pages ÂÇôÁî®ÊñπÊ°à
            await this.loadProjectsFallback();
        }
    }

    /**
     * ËºâÂÖ•Â∞àÊ°àË≥áÊñô
     */
    async loadProjects() {
        try {
            // ‰ΩøÁî®Áõ∏Â∞çË∑ØÂæëÔºåÈÅ©Âêà GitHub Pages
            const response = await fetch('./data/projects.json', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
                cache: 'no-cache' // Á¢∫‰øùÁç≤ÂèñÊúÄÊñ∞Ë≥áÊñô
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.projects = data.projects || [];
            this.categories = data.categories || {};
            
            console.log(`‚úÖ ÊàêÂäüËºâÂÖ• ${this.projects.length} ÂÄãÂ∞àÊ°à`);
        } catch (error) {
            console.error('ËºâÂÖ•Â∞àÊ°àË≥áÊñôÂ§±Êïó:', error);
            throw error;
        }
    }

    /**
     * ÂÇôÁî®ËºâÂÖ•ÊñπÊ°à (ÂÖßÂµåË≥áÊñô)
     */
    async loadProjectsFallback() {
        console.log('üîÑ ‰ΩøÁî®ÂÇôÁî®Ë≥áÊñôËºâÂÖ•ÊñπÊ°à...');
        
        // ÂÖßÂµåÁöÑÂÇôÁî®Ë≥áÊñô
        const fallbackData = {
            "projects": [
                {
                    "id": "file-manager-tool",
                    "type": "project",
                    "title": "Ê™îÊ°àÁÆ°ÁêÜËá™ÂãïÂåñÂ∑•ÂÖ∑",
                    "description": "‰∏ÄÂÄãÂπ´Âä©Êï¥ÁêÜÊ°åÈù¢Êñá‰ª∂ÁöÑ Python Â∑•ÂÖ∑ÔºåÂèØ‰ª•Ê†πÊìöÊ™îÊ°àÈ°ûÂûãËá™ÂãïÂàÜÈ°ûÂà∞‰∏çÂêåË≥áÊñôÂ§æÔºå‰∏¶Êèê‰æõÂúñÂΩ¢Âåñ‰ªãÈù¢ËÆì‰ΩøÁî®ËÄÖËá™Ë®ÇË¶èÂâá„ÄÇ",
                    "techStack": ["Python", "tkinter", "os"],
                    "features": ["ÂúñÂΩ¢‰ªãÈù¢", "Ëá™ÂãïÂàÜÈ°û", "Ëá™Ë®ÇË¶èÂâá"],
                    "date": "2025-05-20",
                    "status": "completed",
                    "category": "python",
                    "icon": "fab fa-python",
                    "image": "",
                    "links": {
                        "demo": "",
                        "github": "https://github.com/kivxx/file-organizer",
                        "documentation": ""
                    },
                    "featured": true
                },
                {
                    "id": "diy-temp-monitor",
                    "type": "diy",
                    "title": "Êô∫ÊÖßÂÆ∂Â∫≠Ê∫´ÊøïÂ∫¶Áõ£Ê∏¨Âô®",
                    "description": "ÁµêÂêà Arduino Âíå ESP32 ÁöÑ IoT Â∞àÊ°àÔºåÂèØ‰ª•Âç≥ÊôÇÁõ£Ê∏¨ÂÆ§ÂÖßÊ∫´ÊøïÂ∫¶‰∏¶ÈÄèÈÅéÁ∂≤È†ÅÈ°ØÁ§∫Ê≠∑Âè≤Êï∏Êìö„ÄÇ",
                    "techStack": ["Arduino", "ESP32", "DHT22", "WiFi"],
                    "features": ["Âç≥ÊôÇÁõ£Ê∏¨", "Á∂≤È†Å‰ªãÈù¢", "Ë≥áÊñôË®òÈåÑ"],
                    "date": "2025-06-10",
                    "status": "completed",
                    "category": "electronics",
                    "icon": "fas fa-microchip",
                    "image": "",
                    "links": {
                        "demo": "",
                        "github": "",
                        "documentation": ""
                    },
                    "featured": false
                }
            ],
            "categories": {
                "diy": {
                    "electronics": { "name": "ÈõªÂ≠êË£Ω‰Ωú", "icon": "fas fa-microchip", "color": "#FF6B6B" },
                    "woodwork": { "name": "Êú®Â∑•Ë£Ω‰Ωú", "icon": "fas fa-hammer", "color": "#4ECDC4" },
                    "3dprinting": { "name": "3DÂàóÂç∞", "icon": "fas fa-cube", "color": "#45B7D1" }
                },
                "project": {
                    "python": { "name": "Python", "icon": "fab fa-python", "color": "#3776AB" },
                    "web": { "name": "Á∂≤È†ÅÈñãÁôº", "icon": "fas fa-globe", "color": "#61DAFB" },
                    "tool": { "name": "ÂØ¶Áî®Â∑•ÂÖ∑", "icon": "fas fa-tools", "color": "#6C5CE7" }
                }
            }
        };
        
        this.projects = fallbackData.projects;
        this.categories = fallbackData.categories;
        console.log(`‚úÖ ÂÇôÁî®ÊñπÊ°àËºâÂÖ• ${this.projects.length} ÂÄãÂ∞àÊ°à`);
    }

    /**
     * Ê†πÊìöÈ†ÅÈù¢È°ûÂûãÊ∏≤ÊüìÂ∞àÊ°àÂàóË°®
     * @param {string} pageType - È†ÅÈù¢È°ûÂûã ('diy' Êàñ 'project')
     */
    renderProjects(pageType) {
        const filteredProjects = this.projects.filter(project => 
            project.type === pageType && 
            (this.currentFilter === 'all' || project.category === this.currentFilter)
        );

        const sortedProjects = this.sortProjects(filteredProjects);

        if (pageType === 'diy') {
            this.renderDIYProjects(sortedProjects);
        } else if (pageType === 'project') {
            this.renderCodeProjects(sortedProjects);
        }
    }

    /**
     * Ê∏≤Êüì DIY Â∞àÊ°à
     */
    renderDIYProjects(projects) {
        const container = document.querySelector('.project-list');
        if (!container) return;

        // Ê∏ÖÁ©∫ÁèæÊúâÂÖßÂÆπÔºà‰øùÁïôÊ®ôÈ°åÔºâ
        const title = container.querySelector('h3');
        container.innerHTML = '';
        if (title) container.appendChild(title);

        // Ê∑ªÂä†ÁØ©ÈÅ∏Âô®
        this.renderFilter(container, 'diy');

        // Ê∏≤ÊüìÂ∞àÊ°à
        projects.forEach(project => {
            const projectElement = this.createDIYProjectElement(project);
            container.appendChild(projectElement);
        });

        if (projects.length === 0) {
            this.showEmptyState(container);
        }
    }

    /**
     * Ê∏≤ÊüìÁ®ãÂºèÂ∞àÊ°à
     */
    renderCodeProjects(projects) {
        // Á≤æÈÅ∏Â∞àÊ°à
        const featuredProjects = projects.filter(p => p.featured);
        this.renderFeaturedProjects(featuredProjects);

        // ÊâÄÊúâÂ∞àÊ°à
        const allProjectsContainer = document.querySelector('#all-projects .projects-grid');
        if (allProjectsContainer) {
            allProjectsContainer.innerHTML = '';
            
            projects.forEach(project => {
                const projectElement = this.createCodeProjectElement(project);
                allProjectsContainer.appendChild(projectElement);
            });

            if (projects.length === 0) {
                this.showEmptyState(allProjectsContainer);
            }
        }
    }

    /**
     * Ê∏≤ÊüìÁ≤æÈÅ∏Â∞àÊ°à
     */
    renderFeaturedProjects(projects) {
        const container = document.querySelector('#featured-projects .projects-grid');
        if (!container) return;

        container.innerHTML = '';
        projects.forEach(project => {
            const projectElement = this.createCodeProjectElement(project, true);
            container.appendChild(projectElement);
        });
    }

    /**
     * ÂâµÂª∫ DIY Â∞àÊ°àÂÖÉÁ¥†
     */
    createDIYProjectElement(project) {
        const categoryInfo = this.categories.diy[project.category] || {};
        
        const projectDiv = document.createElement('div');
        projectDiv.className = 'project-item';
        projectDiv.innerHTML = `
            <div class="project-header">
                <div class="project-icon diy-${project.category}">
                    <i class="${project.icon}"></i>
                </div>
                <div class="project-meta">
                    <h4>${project.title}</h4>
                    <span class="tech-stack">${project.techStack.join(' ‚Ä¢ ')}</span>
                    <span class="project-date">${this.formatDate(project.date)}</span>
                </div>
            </div>
            <p class="project-description">${project.description}</p>
            <div class="project-features">
                ${project.features.map(feature => 
                    `<span class="feature-tag">${feature}</span>`
                ).join('')}
            </div>
            ${this.createProjectLinks(project.links)}
        `;
        
        return projectDiv;
    }

    /**
     * ÂâµÂª∫Á®ãÂºèÂ∞àÊ°àÂÖÉÁ¥†
     */
    createCodeProjectElement(project, isFeatured = false) {
        const categoryInfo = this.categories.project[project.category] || {};
        
        const projectDiv = document.createElement('div');
        projectDiv.className = `project-card${isFeatured ? ' featured' : ''}`;
        projectDiv.innerHTML = `
            <div class="project-header">
                <div class="project-icon ${project.category}">
                    <i class="${project.icon}"></i>
                </div>
                <div class="project-meta">
                    <h4>${project.title}</h4>
                    <span class="tech-stack">${project.techStack.join(' ‚Ä¢ ')}</span>
                </div>
            </div>
            <p class="project-description">${project.description}</p>
            <div class="project-features">
                ${project.features.map(feature => 
                    `<span class="feature-tag">${feature}</span>`
                ).join('')}
            </div>
            ${this.createProjectLinks(project.links)}
        `;
        
        return projectDiv;
    }

    /**
     * ÂâµÂª∫Â∞àÊ°àÈÄ£Áµê
     */
    createProjectLinks(links) {
        const linkElements = [];
        
        if (links.demo) {
            linkElements.push(`<a href="${links.demo}" class="project-link demo">
                <i class="fas fa-play"></i> Demo
            </a>`);
        }
        
        if (links.github) {
            linkElements.push(`<a href="${links.github}" class="project-link github">
                <i class="fab fa-github"></i> GitHub
            </a>`);
        }
        
        if (links.documentation) {
            linkElements.push(`<a href="${links.documentation}" class="project-link docs">
                <i class="fas fa-book"></i> Êñá‰ª∂
            </a>`);
        }

        return linkElements.length > 0 ? 
            `<div class="project-links">${linkElements.join('')}</div>` : '';
    }

    /**
     * Ê∏≤ÊüìÁØ©ÈÅ∏Âô®
     */
    renderFilter(container, type) {
        const filterDiv = document.createElement('div');
        filterDiv.className = 'project-filter';
        
        const categories = this.categories[type] || {};
        const filterOptions = ['all', ...Object.keys(categories)];
        
        const filterHTML = filterOptions.map(category => {
            const categoryInfo = categories[category] || { name: 'ÂÖ®ÈÉ®', icon: 'fas fa-list' };
            const isActive = this.currentFilter === category ? ' active' : '';
            
            return `<button class="filter-btn${isActive}" data-filter="${category}">
                <i class="${categoryInfo.icon}"></i>
                ${category === 'all' ? 'ÂÖ®ÈÉ®' : categoryInfo.name}
            </button>`;
        }).join('');
        
        filterDiv.innerHTML = `
            <div class="filter-controls">
                <div class="filter-buttons">${filterHTML}</div>
                <div class="sort-controls">
                    <select class="sort-select">
                        <option value="date">ÊåâÊó•ÊúüÊéíÂ∫è</option>
                        <option value="title">ÊåâÊ®ôÈ°åÊéíÂ∫è</option>
                        <option value="category">ÊåâÈ°ûÂà•ÊéíÂ∫è</option>
                    </select>
                </div>
            </div>
        `;
        
        container.appendChild(filterDiv);
    }

    /**
     * Ë®≠ÁΩÆ‰∫ã‰ª∂Áõ£ËÅΩÂô®
     */
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (e.target.matches('.filter-btn')) {
                this.handleFilterChange(e.target);
            }
        });

        document.addEventListener('change', (e) => {
            if (e.target.matches('.sort-select')) {
                this.handleSortChange(e.target.value);
            }
        });
    }

    /**
     * ËôïÁêÜÁØ©ÈÅ∏ËÆäÊõ¥
     */
    handleFilterChange(button) {
        // Êõ¥Êñ∞ÊåâÈàïÁãÄÊÖã
        document.querySelectorAll('.filter-btn').forEach(btn => 
            btn.classList.remove('active'));
        button.classList.add('active');

        // Êõ¥Êñ∞ÁØ©ÈÅ∏Ê¢ù‰ª∂‰∏¶ÈáçÊñ∞Ê∏≤Êüì
        this.currentFilter = button.dataset.filter;
        const pageType = this.getCurrentPageType();
        this.renderProjects(pageType);
    }

    /**
     * ËôïÁêÜÊéíÂ∫èËÆäÊõ¥
     */
    handleSortChange(sortType) {
        this.currentSort = sortType;
        const pageType = this.getCurrentPageType();
        this.renderProjects(pageType);
    }

    /**
     * ÊéíÂ∫èÂ∞àÊ°à
     */
    sortProjects(projects) {
        return projects.sort((a, b) => {
            switch (this.currentSort) {
                case 'date':
                    return new Date(b.date) - new Date(a.date);
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'category':
                    return a.category.localeCompare(b.category);
                default:
                    return 0;
            }
        });
    }

    /**
     * Áç≤ÂèñÁï∂ÂâçÈ†ÅÈù¢È°ûÂûã
     */
    getCurrentPageType() {
        const path = window.location.pathname;
        if (path.includes('diy.html')) return 'diy';
        if (path.includes('project.html')) return 'project';
        return 'project'; // È†êË®≠
    }

    /**
     * Ê†ºÂºèÂåñÊó•Êúü
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('zh-TW');
    }

    /**
     * È°ØÁ§∫Á©∫ÁãÄÊÖã
     */
    showEmptyState(container) {
        const emptyDiv = document.createElement('div');
        emptyDiv.className = 'empty-state';
        emptyDiv.innerHTML = `
            <div class="empty-icon">
                <i class="fas fa-search"></i>
            </div>
            <h4>ÁõÆÂâçÊ≤íÊúâÁ¨¶ÂêàÊ¢ù‰ª∂ÁöÑÂ∞àÊ°à</h4>
            <p>Ë©¶Ë©¶Ë™øÊï¥ÁØ©ÈÅ∏Ê¢ù‰ª∂ÊàñÊñ∞Â¢û‰∏Ä‰∫õÂ∞àÊ°àÂêßÔºÅ</p>
        `;
        container.appendChild(emptyDiv);
    }

    /**
     * È°ØÁ§∫ÈåØË™§Ë®äÊÅØ
     */
    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.innerHTML = `
            <div class="error-icon">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <h4>ËºâÂÖ•Â§±Êïó</h4>
            <p>${message}</p>
            <button class="btn btn-primary" onclick="location.reload()">ÈáçÊñ∞ËºâÂÖ•</button>
        `;
        
        const container = document.querySelector('main');
        if (container) {
            container.appendChild(errorDiv);
        }
    }    /**
     * Êñ∞Â¢ûÂ∞àÊ°à (GitHub Pages Ê®°Êì¨ÂäüËÉΩ)
     */
    addProject(projectData) {
        if (this.isGitHubPages) {
            alert('‚ö†Ô∏è GitHub Pages ‰∏çÊîØÊè¥Êñ∞Â¢ûÂäüËÉΩ\n\nË´ãÁõ¥Êé•Á∑®ËºØ data/projects.json Ê™îÊ°àÔºåÁÑ∂ÂæåÊèê‰∫§Âà∞ GitHub ÂÑ≤Â≠òÂ∫´„ÄÇ');
            return;
        }
        
        // ÂéüÊú¨ÁöÑÊñ∞Â¢ûÈÇèËºØ
        const newId = this.generateProjectId(projectData.title);
        const newProject = {
            id: newId,
            ...projectData,
            date: new Date().toISOString().split('T')[0]
        };
        
        this.projects.push(newProject);
        this.renderProjects(projectData.type);
    }

    /**
     * Á∑®ËºØÂ∞àÊ°à (GitHub Pages Ê®°Êì¨ÂäüËÉΩ)
     */
    editProject(projectId, updatedData) {
        if (this.isGitHubPages) {
            alert('‚ö†Ô∏è GitHub Pages ‰∏çÊîØÊè¥Á∑®ËºØÂäüËÉΩ\n\nË´ãÁõ¥Êé•Á∑®ËºØ data/projects.json Ê™îÊ°àÔºåÁÑ∂ÂæåÊèê‰∫§Âà∞ GitHub ÂÑ≤Â≠òÂ∫´„ÄÇ');
            return;
        }
        
        const index = this.projects.findIndex(p => p.id === projectId);
        if (index !== -1) {
            this.projects[index] = { ...this.projects[index], ...updatedData };
            this.renderProjects(this.projects[index].type);
        }
    }

    /**
     * Âà™Èô§Â∞àÊ°à (GitHub Pages Ê®°Êì¨ÂäüËÉΩ)
     */
    deleteProject(projectId) {
        if (this.isGitHubPages) {
            alert('‚ö†Ô∏è GitHub Pages ‰∏çÊîØÊè¥Âà™Èô§ÂäüËÉΩ\n\nË´ãÁõ¥Êé•Á∑®ËºØ data/projects.json Ê™îÊ°àÔºåÁÑ∂ÂæåÊèê‰∫§Âà∞ GitHub ÂÑ≤Â≠òÂ∫´„ÄÇ');
            return;
        }
        
        const index = this.projects.findIndex(p => p.id === projectId);
        if (index !== -1) {
            const projectType = this.projects[index].type;
            this.projects.splice(index, 1);
            this.renderProjects(projectType);
        }
    }

    /**
     * ÁîüÊàêÂ∞àÊ°à ID
     */
    generateProjectId(title) {
        return title.toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            + '-' + Date.now();
    }    /**
     * ÂÑ≤Â≠òÂ∞àÊ°àË≥áÊñô (GitHub Pages Ë™™Êòé)
     */
    saveProjects() {
        if (this.isGitHubPages) {
            console.log('‚ÑπÔ∏è GitHub Pages Áí∞Â¢É - ÁÑ°Ê≥ïÁõ¥Êé•ÂÑ≤Â≠òË≥áÊñô');
            console.log('Ë´ãÁ∑®ËºØ data/projects.json Ê™îÊ°à‰∏¶Êèê‰∫§Âà∞ GitHub');
            return;
        }
        
        // ÂéüÊú¨Âè™ÊòØÊ®°Êì¨ÂÑ≤Â≠ò
        console.log('Â∞àÊ°àË≥áÊñôÂ∑≤Êõ¥Êñ∞:', this.projects);
    }
}

// ÂÖ®ÂüüÂ∞àÊ°àÁÆ°ÁêÜÂô®ÂØ¶‰æã
window.projectManager = new ProjectManager();
